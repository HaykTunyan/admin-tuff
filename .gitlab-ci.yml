stages:
  - build
  - deploy

image: docker

.common-build-rules: &common-build-rules
  rules:
    - if: $CI_COMMIT_TAG  =~ /^(prod|dev)$/
      variables:
        DEPLOY_ENV: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH =~ /^(master)$/
      variables:
        DEPLOY_ENV: prod
    - if: $CI_COMMIT_BRANCH =~ /^(develop)$/
      variables:
        DEPLOY_ENV: dev
    - if: $CI_PIPELINE_SOURCE == "push"
      variables:
        DEPLOY_ENV: dev

.admin-build:
  stage: build
  resource_group: $CI_JOB_NAME
  environment:
    name: $DEPLOY_ENV
  variables:
    VITE_APP_API_URL: $VITE_APP_API_URL
  tags:
    - deployment
  before_script:
    - echo $CI_REGISTRY_PASSWORD | docker login $CI_REGISTRY --username $CI_REGISTRY_USER --password-stdin
  script:
    - cat .env.example > .env
    - sed -i 's|VITE_APP_API_URL=.*|VITE_APP_API_URL='"$VITE_APP_API_URL"'|g' .env
    - docker build -t $CI_REGISTRY_IMAGE/$APP_NAME:$CI_COMMIT_SHORT_SHA -t $CI_REGISTRY_IMAGE/$APP_NAME:latest-$DEPLOY_ENV .
    - docker push $CI_REGISTRY_IMAGE/$APP_NAME:$CI_COMMIT_SHORT_SHA
    - docker push $CI_REGISTRY_IMAGE/$APP_NAME:latest-$DEPLOY_ENV
  <<: *common-build-rules


admin:build:
  extends: [ .admin-build ]
  variables:
    APP_NAME: admin

admin-deploy:
  stage: deploy
  resource_group: $CI_JOB_NAME
  environment:
    name: $CI_COMMIT_TAG
  variables:
    RELEASE_IMAGE: $CI_REGISTRY_IMAGE/admin:latest-$CI_COMMIT_TAG
    UPSTREAM_PROJECT_NAME: $CI_PROJECT_NAME
    REGISTRY: $CI_REGISTRY
  tags:
    - deployment
  script:
    - docker compose -f .docker/docker-compose.yml -p take-$UPSTREAM_PROJECT_NAME-$CI_COMMIT_TAG up -d --remove-orphans
    - docker image prune -f
  rules:
    - if: $CI_COMMIT_TAG =~ /^(prod|dev)$/


